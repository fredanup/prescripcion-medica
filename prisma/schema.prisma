// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

enum PosterSource {
  RAW
  GITHUB
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/v11/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Branch {
  id      String  @id @default(cuid())
  name    String
  address String?
  users   User[]
}

model Document {
  id        String   @id @default(cuid())
  document  String
  key       String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@unique([userId, key]) // Define la combinación única de userId y key
}

model Calling {
  id              String           @id @default(cuid())
  requirement     String
  min_exp_work    Int
  User            User?            @relation(fields: [userId], references: [id])
  userId          String?
  createdAt       DateTime         @default(now())
  resultAt        DateTime
  expiresAt       DateTime
  jobApplications JobApplication[]
}

model JobApplication {
  id            String    @id @default(cuid())
  status        String    @default("pending") //winner or approved or rejected or pending
  resumeKey     String    @default("expediente") //expediente
  createdAt     DateTime  @default(now())
  review        String? //Descripción de la revisión del expediente en la primera etapa
  review2       String? //Descripción de la revisión del expediente en la segunda etapa
  finalScore    Float?
  interviewAt   DateTime?
  interviewLink String?
  Postulant     User      @relation(fields: [postulantId], references: [id])
  postulantId   String
  Calling       Calling   @relation(fields: [callingId], references: [id])
  callingId     String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  elegible        Boolean          @default(false)
  accounts        Account[]
  sessions        Session[]
  // Optional for WebAuthn support
  Authenticator   Authenticator[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Branch          Branch?          @relation(fields: [branchId], references: [id])
  branchId        String?
  callings        Calling[]
  jobApplications JobApplication[]
  documents       Document[]

  UserRole        UserRole[]
  Patient         Patient?
  Doctor          Doctor?
  Pharmacist      Pharmacist?
  LaboratoryStaff LaboratoryStaff?
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  users UserRole[]
}

model UserRole {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([userId, roleId])
}

model Doctor {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Patient {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Pharmacist {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model LaboratoryStaff {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
